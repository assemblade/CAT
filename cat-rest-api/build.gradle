/*
 * Copyright 2012 Mike Adamson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'war'

configurations {
    tomcatLoggingJars
}

dependencies {
    compile project(':cat-client-model')
    compile project(':cat-server')

    compile "org.apache.tomcat:servlet-api:6.0.29"

    compile "commons-lang:commons-lang:2.6"
    compile "commons-collections:commons-collections:3.2.1"
    compile 'org.scribe:scribe:1.3.0'
    compile 'javax.ws.rs:jsr311-api:1.1.1'
    compile 'com.sun.jersey:jersey-core:1.15'
    compile 'com.sun.jersey:jersey-server:1.15'
    compile 'com.sun.jersey:jersey-servlet:1.15'
    compile 'com.sun.jersey:jersey-json:1.15'
    compile ('com.sun.jersey.contribs:jersey-spring:1.15') {
        exclude group: 'org.springframework'
    }
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-expression:${springVersion}"
    compile "org.springframework:spring-beans:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"

    tomcatLoggingJars 'org.apache.tomcat.extras:tomcat-extras-juli:7.0.30'
    tomcatLoggingJars 'org.apache.tomcat.extras:juli-adapters:6.0.35'
    tomcatLoggingJars 'log4j:log4j:1.2.17'
}

ext {
    tomcatVersion = "6.0.36"
    tomcatDownloadURL = "http://apache.mirror.anlx.net/tomcat/tomcat-6/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
    tomcatZipDestination = "${buildDir}/apache-tomcat-${tomcatVersion}.zip"
    tomcatHome = "${buildDir}/apache-tomcat-${tomcatVersion}"
    tomcatZipFile = new File("${tomcatZipDestination}")
}

task fetchTomcat {
    doLast {
        if (!new File("${buildDir}").exists())  {
            new File("${buildDir}").mkdirs();
        }
        if (!tomcatZipFile.exists()) {
            ant.get(src : "${tomcatDownloadURL}", dest: "${tomcatZipDestination}")
        }
    }
}

task stopTomcat {
    doLast {
        ant.exec (executable: '/bin/bash', spawn: 'false') {
            ant.arg (value: '-c')
            ant.arg (value: "ps -efl | grep java | grep ${tomcatHome} | awk '{print \$4}' | xargs -I {} kill -9 {}")
        }
    }
}

task initialiseTomcat(dependsOn: fetchTomcat) {
    inputs.file "${tomcatZipDestination}"
    outputs.file "${tomcatHome}/bin"

    doLast {
        stopTomcat.execute()
        copy {
            from zipTree("${tomcatZipDestination}")
            into "${buildDir}"
            exclude "**/bin/tomcat-juli.jar"
            exclude "**/webapps/docs/**/*"
            exclude "**/webapps/examples/**/*"
            exclude "**/conf/tomcat-users.xml"
            setIncludeEmptyDirs false
        }
        copy {
            from configurations.tomcatLoggingJars
            into "${tomcatHome}/lib"
            include "juli-adapters*.jar"
            include "log4j*.jar"
        }
        copy {
            from configurations.tomcatLoggingJars
            into "${tomcatHome}/bin"
            include "juli*.jar"
            exclude "juli-adapters*.jar";
            rename { String fileName ->
                fileName.replace('juli-6.0.35', 'tomcat-juli')
            }
        }
        copy {
            from "${projectDir}/conf"
            into "${tomcatHome}/lib"
            include "log4j.properties"
        }
        copy {
            from "${projectDir}/conf"
            into "${tomcatHome}/conf"
            include "server.xml"
        }

        file("${tomcatHome}/logs").mkdirs()

        fileTree(dir: "${tomcatHome}/bin", include: '**/*.sh').each { File f ->
            f.setExecutable(true, true)
        }

        ant.propertyfile(file: "${tomcatHome}/lib/application.properties") {
            ant.entry(key: 'datastore.location', value: "${buildDir}/datastore")
        }
    }
}

task deployApplication(dependsOn: initialiseTomcat) {
    inputs.file  "${buildDir}/libs/${project.name}.war"
    outputs.file  "${tomcatHome}/webapps/${project.name}.war"

    doLast {
        stopTomcat.execute()
        ant.delete(dir: "${tomcatHome}/webapps/${project.name}")

        copy {
            from "${buildDir}/libs/${project.name}.war"
            into "${tomcatHome}/webapps"
        }
    }
}

task startTomcat(dependsOn: deployApplication) {
    doLast {
        ant.exec (executable: '/bin/bash', spawn: 'false', outputProperty: 'tomcatOutput') {
            ant.arg (value: '-c')
            ant.arg (value: "ps -efl | grep java | grep ${tomcatHome} | awk '{print \$22}'")
        }

        if (ant.properties.tomcatOutput.indexOf("${tomcatHome}") == -1) {
            println("Starting tomcat")
            ant.parallel {
                ant.sequential {
                    ant.exec (executable: '/bin/bash', spawn: 'true') {
                        ant.arg (value: '-c')
                        ant.arg (value: "export CATALINA_PID=${tomcatHome}/tomcat.pid; export JAVA_HOME=${System.properties['java.home']}; export JAVA_OPTS=\"-Xmx2048m -XX:MaxPermSize=512m\"; export JPDA_ADDRESS=2345; export JPDA_TRANSPORT=dt_socket; export CATALINA_OPTS=-Djavax.net.debug=ssl,handshake; ${tomcatHome}/bin/catalina.sh jpda start")
                    }
                }
                ant.sequential {
                    ant.waitfor (maxwait: 60, maxwaitunit: 'second') {
                        ant.and {
                            ant.socket (server: 'localhost', port: 11080)
                            ant.http(url: 'http://localhost:11080')

                        }
                    }
                }
            }
        }
    }
}

idea.module.excludeDirs = [ file('.gradle') ]

startTomcat.dependsOn war
assemble.dependsOn startTomcat
